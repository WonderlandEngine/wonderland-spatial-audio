/// <reference types="webxr" />
import { Component, ComponentConstructor, Object as Object3D, Scene, Physics, I18N, XR } from './wonderland.js';
import { Emitter } from './utils/event.js';
import { Version } from './version.js';
import { WASM } from './wasm.js';
import { TextureManager } from './texture-manager.js';
/**
 * Main Wonderland Engine instance.
 *
 * Controls the canvas, rendering, and JS <-> WASM communication.
 */
export declare class WonderlandEngine {
    #private;
    /**
     * {@link Emitter} for WebXR session end events.
     *
     * Usage from a within a component:
     * ```js
     * this.engine.onXRSessionEnd.add(() => console.log("XR session ended."));
     * ```
     */
    readonly onXRSessionEnd: Emitter<void[]>;
    /**
     * {@link Emitter} for WebXR session start events.
     *
     * Usage from a within a component:
     * ```js
     * this.engine.onXRSessionStart.add((session, mode) => console.log(session, mode));
     * ```
     *
     * By default, this emitter is retained and will automatically call any callback added
     * while a session is already started:
     *
     * ```js
     * // XR session is already active.
     * this.engine.onXRSessionStart.add((session, mode) => {
     *     console.log(session, mode); // Triggered immediately.
     * });
     * ```
     */
    readonly onXRSessionStart: Emitter<[XRSession, XRSessionMode]>;
    /**
     * {@link Emitter} for canvas / main framebuffer resize events.
     *
     * Usage from a within a component:
     * ```js
     * this.engine.onResize.add(() => {
     *     const canvas = this.engine.canvas;
     *     console.log(`New Size: ${canvas.width}, ${canvas.height}`);
     * });
     * ```
     *
     * @note The size of the canvas is in physical pixels, and is set via {@link WonderlandEngine.resize}.
     */
    readonly onResize: Emitter;
    /** Whether AR is supported by the browser. */
    readonly arSupported: boolean;
    /** Whether VR is supported by the browser. */
    readonly vrSupported: boolean;
    /**
     * {@link Emitter} for scene loaded events.
     *
     * Listeners get notified when a call to {@link Scene#load()} finishes,
     * which also happens after the main scene has replaced the loading screen.
     *
     * Usage from a within a component:
     * ```js
     * this.engine.onSceneLoaded.add(() => console.log("Scene switched!"));
     * ```
     */
    readonly onSceneLoaded: Emitter<void[]>;
    /**
     * Current main scene.
     */
    readonly scene: Scene;
    /**
     * Access to internationalization.
     */
    readonly i18n: I18N;
    /**
     * WebXR related state, `null` if no XR session is active.
     */
    readonly xr: XR | null;
    private _componentCache;
    private readonly _objectCache;
    /**
     * Create a new engine instance.
     *
     * @param wasm Wasm bridge instance
     * @param loadingScreen Loading screen .bin file data
     *
     * @hidden
     */
    constructor(wasm: WASM, loadingScreen: ArrayBuffer | null);
    /**
     * Start the engine if it's not already running.
     *
     * When using the {@link loadRuntime} function, this method is called
     * automatically.
     */
    start(): void;
    /**
     * Register a custom JavaScript component type.
     *
     * You can register a component directly using a class inheriting from {@link Component}:
     *
     * ```js
     * import { Component, Type } from '@wonderlandengine/api';
     *
     * export class MyComponent extends Component {
     *     static TypeName = 'my-component';
     *     static Properties = {
     *         myParam: {type: Type.Float, default: 42.0},
     *     };
     *     init() {}
     *     start() {}
     *     update(dt) {}
     *     onActivate() {}
     *     onDeactivate() {}
     *     onDestroy() {}
     * });
     *
     * // Here, we assume we have an engine already instantiated.
     * // In general, the registration occurs in the `index.js` file in your
     * // final application.
     * engine.registerComponent(MyComponent);
     * ```
     *
     * {@label CLASSES}
     * @param classes Custom component(s) extending {@link Component}.
     *
     * @since 1.0.0
     */
    registerComponent(...classes: ComponentConstructor[]): void;
    /**
     * Checks whether the given component is registered or not.
     *
     * @param typeOrClass A string representing the component typename (e.g., `'cursor-component'`),
     *     or a component class (e.g., `CursorComponent`).
     * @returns `true` if the component is registered, `false` otherwise.
     */
    isRegistered(typeOrClass: string | ComponentConstructor): boolean;
    /**
     * Resize the canvas and the rendering context.
     *
     * @note The `width` and `height` parameters will be scaled by the
     * `devicePixelRatio` value. By default, the pixel ratio used is
     * [window.devicePixelRatio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio).
     *
     * @param width The width, in CSS pixels.
     * @param height The height, in CSS pixels.
     * @param devicePixelRatio The pixel ratio factor.
     */
    resize(width: number, height: number, devicePixelRatio?: number): void;
    /**
     * Run the next frame.
     *
     * @param fixedDelta The elapsed time between this frame and the previous one.
     *
     * @note The engine automatically schedules next frames. You should only
     * use this method for testing.
     */
    nextFrame(fixedDelta: number): void;
    /**
     * Request a XR session.
     *
     * @note Please use this call instead of directly calling `navigator.xr.requestSession()`.
     * Wonderland Engine requires to be aware that a session is started, and this
     * is done through this call.
     *
     * @param mode The XR mode.
     * @param features An array of required features, e.g., `['local-floor', 'hit-test']`.
     * @param optionalFeatures An array of optional features, e.g., `['bounded-floor', 'depth-sensing']`.
     * @returns A promise resolving with the `XRSession`, a string error message otherwise.
     */
    requestXRSession(mode: XRSessionMode, features: string[], optionalFeatures?: string[]): Promise<XRSession>;
    /**
     * Wrap an object ID using {@link Object}.
     *
     * @note This method performs caching and will return the same
     * instance on subsequent calls.
     *
     * @param objectId ID of the object to create.
     *
     * @returns The object
     */
    wrapObject(objectId: number): Object3D;
    /**
     * WebAssembly bridge.
     *
     * @note Use with care. This object is used to communicate
     * with the WebAssembly code throughout the api.
     *
     * @hidden
     */
    get wasm(): WASM;
    /** Canvas element that Wonderland Engine renders to. */
    get canvas(): HTMLCanvasElement;
    /**
     * Current WebXR session or `null` if no session active.
     *
     * @deprecated Use {@link XR.session} on the {@link xr}
     * object instead.
     */
    get xrSession(): XRSession | null;
    /**
     * Current WebXR frame or `null` if no session active.
     *
     * @deprecated Use {@link XR.frame} on the {@link xr}
     * object instead.
     */
    get xrFrame(): XRFrame | null;
    /**
     * Current WebXR base layer or `null` if no session active.
     *
     * @deprecated Use {@link XR.baseLayer} on the {@link xr}
     * object instead.
     */
    get xrBaseLayer(): XRProjectionLayer | null;
    /**
     * Current WebXR framebuffer or `null` if no session active.
     *
     * @deprecated Use {@link XR.framebuffers} on the
     * {@link xr} object instead.
     */
    get xrFramebuffer(): WebGLFramebuffer | null;
    /** Framebuffer scale factor. */
    get xrFramebufferScaleFactor(): number;
    set xrFramebufferScaleFactor(value: number);
    /** Physics manager, only available when physx is enabled in the runtime. */
    get physics(): Physics | null;
    /**
     * Texture managger.
     *
     * Use this to load or programmatically create new textures at runtime.
     */
    get textures(): TextureManager;
    set autoResizeCanvas(flag: boolean);
    /** `true` if the canvas is automatically resized by the engine. */
    get autoResizeCanvas(): boolean;
    /** Retrieves the runtime version. */
    get runtimeVersion(): Version;
    /**
     * Initialize the engine.
     *
     * @note Should be called after the WebAssembly is fully loaded.
     *
     * @hidden
     */
    _init(): void;
    /**
     * Reset the runtime state, including:
     *     - Component cache
     *     - Images
     *     - Callbacks
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _reset(): void;
    /**
     * Retrieves a component instance if it exists, or create and cache
     * a new one.
     *
     * @note This api is meant to be used internally. Please have a look at
     * {@link Object3D.addComponent} instead.
     *
     * @param type component type name
     * @param componentType Component manager index
     * @param componentId Component id in the manager
     *
     * @returns JavaScript instance wrapping the native component
     *
     * @hidden
     */
    _wrapComponent(type: string, componentType: number, componentId: number): Component | null;
}
