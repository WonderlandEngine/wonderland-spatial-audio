/// <reference types="webxr" />
import { WonderlandEngine } from './engine.js';
import { ComponentProperty } from './property.js';
import { Component, ComponentConstructor, ComponentProto } from './wonderland.js';
/**
 * Material definition interface.
 *
 * @hidden
 */
export interface MaterialDefinition {
    index: number;
    type: {
        type: number;
        componentCount: number;
        metaType: number;
    };
}
type XRRequestSessionFunction = (mode: XRSessionMode, requiredFeatures: string[], optionalFeatures: string[]) => Promise<XRSession>;
/**
 * Low-level wrapper to interact with the WebAssembly code.
 *
 * @hidden
 */
export declare class WASM {
    /**
     * Emscripten worker field.
     *
     * @note This api is meant to be used internally.
     */
    readonly worker: string;
    /**
     * Emscripten wasm field.
     *
     * @note This api is meant to be used internally.
     */
    readonly wasm: ArrayBuffer;
    /**
     * Emscripten canvas.
     *
     * @note This api is meant to be used internally.
     */
    readonly canvas: HTMLCanvasElement;
    /** Current WebXR  */
    /**
     * Emscripten WebXR session.
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_session: XRSession | null;
    /**
     * Emscripten WebXR request session callback.
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_requestSession: XRRequestSessionFunction;
    /**
     * Emscripten WebXR frame.
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_frame: XRFrame | null;
    /**
     * Emscripten current WebXR reference space.
     *
     * @note This api is meant to be used internally.
     */
    webxr_refSpace: XRReferenceSpace | null;
    /**
     * Emscripten WebXR reference spaces.
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_refSpaces: Record<XRReferenceSpaceType, XRReferenceSpace | undefined> | null;
    /**
     * Emscripten WebXR current reference space type.
     *
     * @note This api is meant to be used internally.
     */
    webxr_refSpaceType: XRReferenceSpaceType | null;
    /**
     * Emscripten WebXR GL projection layer.
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_baseLayer: XRProjectionLayer | null;
    /**
     * Emscripten WebXR framebuffer scale factor.
     *
     * @note This api is meant to be used internally.
     */
    webxr_framebufferScaleFactor: number;
    /**
     * Emscripten WebXR framebuffer(s).
     *
     * @note This api is meant to be used internally.
     */
    readonly webxr_fbo: number | number[];
    /**
     * Convert a WASM memory view to a JavaScript string.
     *
     * @param ptr Pointer start
     * @param ptrEnd Pointer end
     * @returns JavaScript string
     */
    UTF8ViewToString: (ptr: number, ptrEnd: number) => string;
    /** If `true`, logs will not spam the console on error. */
    _deactivate_component_on_error: boolean;
    /** Temporary memory pointer. */
    _tempMem: number;
    /** Temporary memory size. */
    _tempMemSize: number;
    /** Temporary float memory view. */
    _tempMemFloat: Float32Array;
    /** Temporary int memory view. */
    _tempMemInt: Int32Array;
    /** Temporary uint8 memory view. */
    _tempMemUint8: Uint8Array;
    /** Temporary uint32 memory view. */
    _tempMemUint32: Uint32Array;
    /** Temporary uint16 memory view. */
    _tempMemUint16: Uint16Array;
    /** Loading screen .bin file data */
    _loadingScreen: ArrayBuffer | null;
    /** List of callbacks triggered when the scene is loaded. */
    readonly _sceneLoadedCallback: any[];
    /**
     * Material definition cache. Each pipeline has its own
     * associated material definition.
     */
    _materialDefinitions: Map<string | symbol, MaterialDefinition>[];
    /** Image cache. */
    _images: (HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null)[];
    /** Component instances. */
    _components: Component[];
    /** Component Type info. */
    _componentTypes: ComponentConstructor[];
    /** Index per component type name. */
    _componentTypeIndices: Record<string, number>;
    /** Wonderland engine instance. */
    private _engine;
    /**
     * `true` if this runtime is using physx.
     *
     * @note This api is meant to be used internally.
     */
    private _withPhysX;
    /** Decoder for UTF8 `ArrayBuffer` to JavaScript string. */
    private readonly _utf8Decoder;
    /** List of .bin files to delay-load. */
    _queuedBinFiles: string[];
    /**
     * Create a new instance of the WebAssembly <> API bridge.
     *
     * @param threads `true` if the runtime used has threads support
     */
    constructor(threads: boolean);
    /**
     * Reset the cache of the library
     *
     * @note Should only be called when tearing down the runtime.
     */
    reset(): void;
    /**
     * Checks whether the given component is registered or not.
     *
     * @param ctor  A string representing the component typename (e.g., `'cursor-component'`).
     * @returns `true` if the component is registered, `false` otherwise.
     */
    isRegistered(type: string): boolean;
    /**
     * Register a legacy component in this Emscripten instance.
     *
     * @note This api is meant to be used internally.
     *
     * @param typeName The name of the component.
     * @param params An object containing the parameters (properties).
     * @param object The object's prototype.
     * @returns The registration index
     */
    _registerComponentLegacy(typeName: string, params: Record<string, ComponentProperty>, object: ComponentProto): number;
    /**
     * Register a class component in this Emscripten instance.
     *
     * @note This api is meant to be used internally.
     *
     * @param ctor The class to register.
     * @returns The registration index.
     */
    _registerComponent(ctor: ComponentConstructor): number;
    /**
     * Allocate the requested amount of temporary memory
     * in this WASM instance.
     *
     * @param size The number of bytes to allocate
     */
    allocateTempMemory(size: number): void;
    /**
     * @todo: Delete this and only keep `allocateTempMemory`
     *
     * @param size Number of bytes to allocate
     */
    requireTempMem(size: number): void;
    /**
     * Update the temporary memory views. This must be called whenever the
     * temporary memory address changes.
     *
     * @note This api is meant to be used internally.
     */
    updateTempMemory(): void;
    /**
     * Returns a uint8 buffer view on temporary WASM memory.
     *
     * **Note**: this method might allocate if the requested memory is bigger
     * than the current temporary memory allocated.
     *
     * @param count The number of **elements** required
     * @returns A {@link TypedArray} over the WASM memory
     */
    getTempBufferU8(count: number): Uint8Array;
    /**
     * Returns a uint16 buffer view on temporary WASM memory.
     *
     * **Note**: this method might allocate if the requested memory is bigger
     * than the current temporary memory allocated.
     *
     * @param count The number of **elements** required
     * @returns A {@link TypedArray} over the WASM memory
     */
    getTempBufferU16(count: number): Uint16Array;
    /**
     * Returns a uint32 buffer view on temporary WASM memory.
     *
     * **Note**: this method might allocate if the requested memory is bigger
     * than the current temporary memory allocated.
     *
     * @param count The number of **elements** required.
     * @returns A {@link TypedArray} over the WASM memory.
     */
    getTempBufferU32(count: number): Uint32Array;
    /**
     * Returns a int32 buffer view on temporary WASM memory.
     *
     * **Note**: this method might allocate if the requested memory is bigger
     * than the current temporary memory allocated.
     *
     * @param count The number of **elements** required.
     * @returns A {@link TypedArray} over the WASM memory.
     */
    getTempBufferI32(count: number): Int32Array;
    /**
     * Returns a float32 buffer view on temporary WASM memory.
     *
     * **Note**: this method might allocate if the requested memory is bigger
     * than the current temporary memory allocated.
     *
     * @param count The number of **elements** required.
     * @returns A {@link TypedArray} over the WASM memory.
     */
    getTempBufferF32(count: number): Float32Array;
    /**
     * Copy the string into temporary WASM memory and retrieve the pointer.
     *
     * @note This method will compute the strlen and append a `\0`.
     *
     * @note The result should be used **directly** otherwise it might get
     * overridden by any next call modifying the temporary memory.
     *
     * @param str The string to write to temporary memory
     * @return The temporary pointer onto the WASM memory
     */
    tempUTF8(str: string): number;
    /**
     * Return the index of the component type.
     *
     * @note This method uses malloc and copies the string
     * to avoid overwriting caller's temporary data.
     *
     * @param type The type
     * @return The component type index
     */
    _typeIndexFor(type: string): number;
    /**
     * Return the name of component type stored at the given index.
     *
     * @param typeIndex The type index
     * @return The name as a string
     */
    _typeNameFor(typeIndex: number): string;
    /**
     * Returns `true` if the runtime supports physx or not.
     */
    get withPhysX(): boolean;
    /**
     * Set the engine instance holding this bridge.
     *
     * @note This api is meant to be used internally.
     *
     * @param engine The engine instance.
     */
    protected _setEngine(engine: WonderlandEngine): void;
    protected _wljs_xr_session_start(mode: XRSessionMode): void;
    protected _wljs_xr_session_end(): void;
    protected _wljs_xr_disable(): void;
    protected _wljs_allocate(numComponents: number): void;
    protected _wljs_init(withPhysX: boolean): void;
    protected _wljs_reallocate(numComponents: number): void;
    protected _wljs_scene_add_material_definition(definitionId: number): void;
    protected _wljs_set_component_param_bool(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_int(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_float(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_string(c: number, p: number, pe: number, v: number, ve: number): void;
    protected _wljs_set_component_param_color(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_object(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_mesh(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_texture(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_material(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_animation(c: number, p: number, pe: number, v: number): void;
    protected _wljs_set_component_param_skin(c: number, p: number, pe: number, v: number): void;
    protected _wljs_get_component_type_index(namePtr: number, nameEndPtr: number): number;
    protected _wljs_component_create(jsManagerIndex: number, index: number, id: number, type: number, object: number): Component;
    _wljs_component_init(component: number): void;
    protected _wljs_component_update(component: number, dt: number): void;
    protected _wljs_component_onActivate(component: number): void;
    protected _wljs_component_onDeactivate(component: number): void;
    protected _wljs_component_onDestroy(component: number): void;
    protected _wljs_swap(a: number, b: number): void;
    HEAP8: Int8Array;
    HEAPU8: Uint8Array;
    HEAPU16: Uint16Array;
    HEAPU32: Uint32Array;
    HEAP32: Int32Array;
    HEAPF32: Float32Array;
    GL: {
        framebuffers: WebGLFramebuffer[];
    };
    assert: (condition: boolean, msg?: string) => void;
    _free: (ptr: number) => void;
    _malloc: (size: number) => number;
    lengthBytesUTF8: (str: string) => number;
    stringToUTF8: (str: string, outPtr: number, len: number) => void;
    UTF8ToString: (ptr: number) => string;
    addFunction: (func: Function, sig: string) => number;
    removeFunction: (ptr: number) => void;
    _wl_set_error_callback: (cbPtr: number) => void;
    _wl_application_version: (out: number) => number;
    _wl_application_start: () => void;
    _wl_application_resize: (width: number, height: number) => void;
    _wl_nextUpdate: (delta: number) => void;
    _wl_nextFrame: (delta: number) => void;
    _wl_scene_get_active_views: (ptr: number, count: number) => number;
    _wl_scene_ray_cast: (x: number, y: number, z: number, dx: number, dy: number, dz: number, group: number, outPtr: number) => void;
    _wl_scene_add_object: (parentId: number) => number;
    _wl_scene_add_objects: (parentId: number, count: number, componentCountHint: number, ptr: number, size: number) => number;
    _wl_scene_reserve_objects: (objectCount: number, _tempMem: number) => void;
    _wl_scene_set_clearColor: (r: number, g: number, b: number, a: number) => void;
    _wl_scene_enableColorClear: (b: boolean) => void;
    _wl_set_loading_screen_progress: (ratio: number) => void;
    _wl_load_scene_bin: (binData: number, binSize: number, scenePath: number) => void;
    _wl_append_scene_bin: (binData: number, binSize: number, callback: number) => void;
    _wl_append_scene_gltf: (gltfData: number, gltfSize: number, loadExtensions: boolean, callback: number) => void;
    _wl_scene_reset: () => void;
    _wl_component_get_object: (manager: number, id: number) => number;
    _wl_component_setActive: (manager: number, id: number, active: boolean) => void;
    _wl_component_isActive: (manager: number, id: number) => number;
    _wl_component_remove: (manager: number, id: number) => void;
    _wl_collision_component_get_collider: (id: number) => number;
    _wl_collision_component_set_collider: (id: number, collider: number) => void;
    _wl_collision_component_get_extents: (id: number) => number;
    _wl_collision_component_get_group: (id: number) => number;
    _wl_collision_component_set_group: (id: number, group: number) => void;
    _wl_collision_component_query_overlaps: (id: number, outPtr: number, outCount: number) => number;
    _wl_text_component_get_horizontal_alignment: (id: number) => number;
    _wl_text_component_set_horizontal_alignment: (id: number, alignment: number) => void;
    _wl_text_component_get_vertical_alignment: (id: number) => number;
    _wl_text_component_set_vertical_alignment: (id: number, justification: number) => void;
    _wl_text_component_get_character_spacing: (id: number) => number;
    _wl_text_component_set_character_spacing: (id: number, spacing: number) => void;
    _wl_text_component_get_line_spacing: (id: number) => number;
    _wl_text_component_set_line_spacing: (id: number, spacing: number) => void;
    _wl_text_component_get_effect: (id: number) => number;
    _wl_text_component_set_effect: (id: number, spacing: number) => void;
    _wl_text_component_get_text: (id: number) => number;
    _wl_text_component_set_text: (id: number, ptr: number) => void;
    _wl_text_component_set_material: (id: number, materialId: number) => void;
    _wl_text_component_get_material: (id: number) => number;
    _wl_view_component_get_projection_matrix: (id: number) => number;
    _wl_view_component_get_near: (id: number) => number;
    _wl_view_component_set_near: (id: number, near: number) => void;
    _wl_view_component_get_far: (id: number) => number;
    _wl_view_component_set_far: (id: number, far: number) => void;
    _wl_view_component_get_fov: (id: number) => number;
    _wl_view_component_set_fov: (id: number, fov: number) => void;
    _wl_input_component_get_type: (id: number) => number;
    _wl_input_component_set_type: (id: number, type: number) => void;
    _wl_light_component_get_color: (id: number) => number;
    _wl_light_component_get_type: (id: number) => number;
    _wl_light_component_set_type: (id: number, type: number) => void;
    _wl_light_component_get_intensity: (id: number) => number;
    _wl_light_component_set_intensity: (id: number, intensity: number) => void;
    _wl_light_component_get_outerAngle: (id: number) => number;
    _wl_light_component_set_outerAngle: (id: number, angle: number) => void;
    _wl_light_component_get_innerAngle: (id: number) => number;
    _wl_light_component_set_innerAngle: (id: number, angle: number) => void;
    _wl_light_component_get_shadows: (id: number) => number;
    _wl_light_component_set_shadows: (id: number, shadows: boolean) => void;
    _wl_light_component_get_shadowRange: (id: number) => number;
    _wl_light_component_set_shadowRange: (id: number, range: number) => void;
    _wl_light_component_get_shadowBias: (id: number) => number;
    _wl_light_component_set_shadowBias: (id: number, bias: number) => void;
    _wl_light_component_get_shadowNormalBias: (id: number) => number;
    _wl_light_component_set_shadowNormalBias: (id: number, bias: number) => void;
    _wl_light_component_get_shadowTexelSize: (id: number) => number;
    _wl_light_component_set_shadowTexelSize: (id: number, size: number) => void;
    _wl_light_component_get_cascadeCount: (id: number) => number;
    _wl_light_component_set_cascadeCount: (id: number, count: number) => void;
    _wl_animation_component_get_animation: (id: number) => number;
    _wl_animation_component_set_animation: (id: number, animId: number) => void;
    _wl_animation_component_get_playCount: (id: number) => number;
    _wl_animation_component_set_playCount: (id: number, count: number) => void;
    _wl_animation_component_get_speed: (id: number) => number;
    _wl_animation_component_set_speed: (id: number, speed: number) => void;
    _wl_animation_component_play: (id: number) => void;
    _wl_animation_component_stop: (id: number) => void;
    _wl_animation_component_pause: (id: number) => void;
    _wl_animation_component_state: (id: number) => number;
    _wl_mesh_component_get_material: (id: number) => number;
    _wl_mesh_component_set_material: (id: number, materialId: number) => void;
    _wl_mesh_component_get_mesh: (id: number) => number;
    _wl_mesh_component_set_mesh: (id: number, meshId: number) => void;
    _wl_mesh_component_get_skin: (id: number) => number;
    _wl_mesh_component_set_skin: (id: number, skinId: number) => void;
    _wl_physx_component_get_static: (id: number) => number;
    _wl_physx_component_set_static: (id: number, flag: boolean) => void;
    _wl_physx_component_get_kinematic: (id: number) => number;
    _wl_physx_component_set_kinematic: (id: number, kinematic: boolean) => void;
    _wl_physx_component_get_gravity: (id: number) => number;
    _wl_physx_component_set_gravity: (id: number, gravity: boolean) => void;
    _wl_physx_component_get_simulate: (id: number) => number;
    _wl_physx_component_set_simulate: (id: number, simulation: boolean) => void;
    _wl_physx_component_get_allowSimulation: (id: number) => number;
    _wl_physx_component_set_allowSimulation: (id: number, allowSimulation: boolean) => void;
    _wl_physx_component_get_allowQuery: (id: number) => number;
    _wl_physx_component_set_allowQuery: (id: number, allowQuery: boolean) => void;
    _wl_physx_component_get_trigger: (id: number) => number;
    _wl_physx_component_set_trigger: (id: number, trigger: boolean) => void;
    _wl_physx_component_get_shape: (id: number) => number;
    _wl_physx_component_set_shape: (id: number, shape: number) => void;
    _wl_physx_component_get_shape_data: (id: number) => number;
    _wl_physx_component_set_shape_data: (id: number, shapeIndex: number) => void;
    _wl_physx_component_get_extents: (id: number) => number;
    _wl_physx_component_get_staticFriction: (id: number) => number;
    _wl_physx_component_set_staticFriction: (id: number, value: number) => void;
    _wl_physx_component_get_dynamicFriction: (id: number) => number;
    _wl_physx_component_set_dynamicFriction: (id: number, value: number) => void;
    _wl_physx_component_get_bounciness: (id: number) => number;
    _wl_physx_component_set_bounciness: (id: number, value: number) => void;
    _wl_physx_component_get_linearDamping: (id: number) => number;
    _wl_physx_component_set_linearDamping: (id: number, value: number) => void;
    _wl_physx_component_get_angularDamping: (id: number) => number;
    _wl_physx_component_set_angularDamping: (id: number, value: number) => void;
    _wl_physx_component_get_linearVelocity: (id: number, ptr: number) => number;
    _wl_physx_component_set_linearVelocity: (id: number, x: number, y: number, z: number) => void;
    _wl_physx_component_get_angularVelocity: (id: number, ptr: number) => number;
    _wl_physx_component_set_angularVelocity: (id: number, x: number, y: number, z: number) => void;
    _wl_physx_component_get_groupsMask: (id: number) => number;
    _wl_physx_component_set_groupsMask: (id: number, flags: number) => void;
    _wl_physx_component_get_blocksMask: (id: number) => number;
    _wl_physx_component_set_blocksMask: (id: number, flags: number) => void;
    _wl_physx_component_get_linearLockAxis: (id: number) => number;
    _wl_physx_component_set_linearLockAxis: (id: number, lock: number) => void;
    _wl_physx_component_get_angularLockAxis: (id: number) => number;
    _wl_physx_component_set_angularLockAxis: (id: number, lock: number) => void;
    _wl_physx_component_get_mass: (id: number) => number;
    _wl_physx_component_set_mass: (id: number, value: number) => void;
    _wl_physx_component_set_massSpaceInertiaTensor: (id: number, x: number, y: number, z: number) => void;
    _wl_physx_component_addForce: (id: number, x: number, y: number, z: number, mode: number, localForce: boolean) => void;
    _wl_physx_component_addForceAt: (id: number, x: number, y: number, z: number, mode: number, localForce: boolean, posX: number, posY: number, posZ: number, local: boolean) => void;
    _wl_physx_component_addTorque: (id: number, x: number, y: number, z: number, mode: number) => void;
    _wl_physx_component_addCallback: (id: number, otherId: number) => number;
    _wl_physx_component_removeCallback: (id: number, callbackId: number) => number;
    _wl_physx_update_global_pose: (object: number, component: number) => void;
    _wl_physx_ray_cast: (x: number, y: number, z: number, dx: number, dy: number, dz: number, group: number, maxDistance: number, outPtr: number) => void;
    _wl_physx_set_collision_callback: (callback: number) => void;
    _wl_mesh_create: (indicesPtr: number, indicesSize: number, indexType: number, vertexCount: number, skinningType: number) => number;
    _wl_mesh_get_vertexData: (id: number, outPtr: number) => number;
    _wl_mesh_get_vertexCount: (id: number) => number;
    _wl_mesh_get_indexData: (id: number, outPtr: number, count: number) => number;
    _wl_mesh_update: (id: number) => void;
    _wl_mesh_get_boundingSphere: (id: number, outPtr: number) => void;
    _wl_mesh_get_attribute: (id: number, attribute: number, outPtr: number) => void;
    _wl_mesh_destroy: (id: number) => void;
    _wl_mesh_get_attribute_values: (attribute: number, srcFormatSize: number, srcPtr: number, srcStride: number, dstFormatSize: number, destPtr: number, dstSize: number) => void;
    _wl_mesh_set_attribute_values: (attribute: number, srcFormatSize: number, srcPtr: number, srcSize: number, dstFormatSize: number, destPtr: number, destStride: number) => void;
    _wl_material_create: (ptr: number) => number;
    _wl_material_get_definition: (id: number) => number;
    _wl_material_definition_get_count: (id: number) => number;
    _wl_material_definition_get_param_name: (id: number, index: number) => number;
    _wl_material_definition_get_param_type: (id: number, index: number) => number;
    _wl_material_get_pipeline: (id: number) => number;
    _wl_material_clone: (id: number) => number;
    _wl_material_get_param_index: (id: number, namePtr: number) => number;
    _wl_material_get_param_type: (id: number, paramId: number) => number;
    _wl_material_get_param_value: (id: number, paramId: number, outPtr: number) => number;
    _wl_material_set_param_value_uint: (id: number, paramId: number, valueId: number) => void;
    _wl_material_set_param_value_float: (id: number, paramId: number, ptr: number, count: number) => void;
    _wl_renderer_addImage: (id: number) => number;
    _wl_texture_width: (id: number) => number;
    _wl_texture_height: (id: number) => number;
    _wl_renderer_updateImage: (id: number, imageIndex: number, xOffset?: number, yOffset?: number) => void;
    _wl_texture_destroy: (id: number) => void;
    _wl_animation_get_duration: (id: number) => number;
    _wl_animation_get_trackCount: (id: number) => number;
    _wl_animation_retargetToSkin: (id: number, targetId: number) => number;
    _wl_animation_retarget: (id: number, ptr: number) => number;
    _wl_object_name: (id: number) => number;
    _wl_object_set_name: (id: number, ptr: number) => void;
    _wl_object_parent: (id: number) => number;
    _wl_object_get_children_count: (id: number) => number;
    _wl_object_get_children: (id: number, outPtr: number, count: number) => number;
    _wl_object_set_parent: (id: number, parentId: number) => void;
    _wl_object_reset_scaling: (id: number) => void;
    _wl_object_reset_translation_rotation: (id: number) => void;
    _wl_object_reset_rotation: (id: number) => void;
    _wl_object_reset_translation: (id: number) => void;
    _wl_object_translate: (id: number, x: number, y: number, z: number) => void;
    _wl_object_translate_obj: (id: number, x: number, y: number, z: number) => void;
    _wl_object_translate_world: (id: number, x: number, y: number, z: number) => void;
    _wl_object_rotate_axis_angle: (id: number, x: number, y: number, z: number, deg: number) => void;
    _wl_object_rotate_axis_angle_rad: (id: number, x: number, y: number, z: number, rad: number) => void;
    _wl_object_rotate_axis_angle_obj: (id: number, x: number, y: number, z: number, deg: number) => void;
    _wl_object_rotate_axis_angle_rad_obj: (id: number, x: number, y: number, z: number, rad: number) => void;
    _wl_object_rotate_quat: (id: number, x: number, y: number, z: number, w: number) => void;
    _wl_object_rotate_quat_obj: (id: number, x: number, y: number, z: number, w: number) => void;
    _wl_object_scale: (id: number, x: number, y: number, z: number) => void;
    _wl_object_trans_local: (id: number) => number;
    _wl_object_get_translation_local: (id: number, outPtr: number) => void;
    _wl_object_set_translation_local: (id: number, x: number, y: number, z: number) => void;
    _wl_object_get_translation_world: (id: number, outPtr: number) => void;
    _wl_object_set_translation_world: (id: number, x: number, y: number, z: number) => void;
    _wl_object_trans_world: (id: number) => number;
    _wl_object_trans_world_to_local: (id: number) => number;
    _wl_object_scaling_local: (id: number) => number;
    _wl_object_scaling_world: (id: number) => number;
    _wl_object_set_scaling_local: (id: number, x: number, y: number, z: number) => void;
    _wl_object_set_scaling_world: (id: number, x: number, y: number, z: number) => void;
    _wl_object_scaling_world_to_local: (id: number) => number;
    _wl_object_set_rotation_local: (id: number, x: number, y: number, z: number, w: number) => void;
    _wl_object_set_rotation_world: (id: number, x: number, y: number, z: number, w: number) => void;
    _wl_object_transformVectorWorld: (id: number, ptr: number) => number;
    _wl_object_transformVectorLocal: (id: number, ptr: number) => number;
    _wl_object_transformPointWorld: (id: number, ptr: number) => number;
    _wl_object_transformPointLocal: (id: number, ptr: number) => number;
    _wl_object_transformVectorInverseWorld: (id: number, ptr: number) => number;
    _wl_object_transformVectorInverseLocal: (id: number, ptr: number) => number;
    _wl_object_transformPointInverseWorld: (id: number, ptr: number) => number;
    _wl_object_transformPointInverseLocal: (id: number, ptr: number) => number;
    _wl_object_toWorldSpaceTransform: (id: number, ptr: number) => number;
    _wl_object_toObjectSpaceTransform: (id: number, ptr: number) => number;
    _wl_object_lookAt: (id: number, x: number, y: number, z: number, upX: number, upY: number, upZ: number) => void;
    _wl_scene_remove_object: (id: number) => void;
    _wl_object_set_dirty: (id: number) => void;
    _wl_get_component_manager_index: (ptr: number) => number;
    _wl_get_js_component_index: (id: number, outPtr: number, count: number) => number;
    _wl_get_js_component_index_for_id: (id: number) => number;
    _wl_get_component_id: (id: number, managerId: number, index: number) => number;
    _wl_object_get_components: (id: number, outPtr: number, count: number) => number;
    _wl_object_get_component_types: (id: number, outPtr: number, count: number) => void;
    _wl_object_add_js_component: (id: number, typeId: number) => number;
    _wl_object_add_component: (id: number, typeId: number) => number;
    _wl_object_is_changed: (id: number) => number;
    _wl_component_manager_name: (id: number) => number;
    _wl_skin_get_joint_count: (id: number) => number;
    _wl_skin_joint_ids: (id: number) => number;
    _wl_skin_inverse_bind_transforms: (id: number) => number;
    _wl_skin_inverse_bind_scalings: (id: number) => number;
    _wl_math_cubicHermite: (a: number, b: number, c: number, d: number, f: number, e: number, isQuat: boolean) => void;
    _wl_i18n_setLanguage: (ptr: number) => void;
    _wl_i18n_currentLanguage: () => number;
    _wl_i18n_translate: (ptr: number) => number;
    _wl_i18n_languageCount: () => number;
    _wl_i18n_languageIndex: (ptr: number) => number;
    _wl_i18n_languageCode: (index: number) => number;
    _wl_i18n_languageName: (index: number) => number;
}
export {};
