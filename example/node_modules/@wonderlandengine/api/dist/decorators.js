import { Property, Type } from './property.js';
/**
 * Decorator for JS component properties.
 *
 * @param data The property description as an object literal
 * @returns A decorator function modifying the `Properties` static
 *     attribute
 */
function propertyDecorator(data) {
    return function (target, propertyKey) {
        const ctor = target.constructor;
        ctor.Properties = ctor.Properties ?? {};
        ctor.Properties[propertyKey] = data;
    };
}
/**
 * Decorator for making a getter enumerable.
 *
 * Usage:
 *
 * ```ts
 * class MyClass {
 *     @enumerable()
 *     get projectionMatrix(): Float32Array { ... }
 * }
 * ```
 */
export function enumerable() {
    return function (_, __, descriptor) {
        descriptor.enumerable = true;
    };
}
/**
 * Decorator for native properties.
 *
 * Usage:
 *
 * ```ts
 * class MyClass {
 *     @nativeProperty()
 *     get projectionMatrix(): Float32Array { ... }
 * }
 * ```
 */
export function nativeProperty() {
    return function (target, propertyKey, descriptor) {
        enumerable()(target, propertyKey, descriptor);
        propertyDecorator({ type: Type.Native })(target, propertyKey);
    };
}
/**
 * Property decorators namespace.
 *
 * You can use the decorators to mark a class attribute as
 * a Wonderland Engine property.
 *
 * Usage:
 *
 * ```ts
 * import {Mesh} from '@wonderlandengine/api';
 * import {property} from '@wonderlandengine/api/decorators.js';
 *
 * class MyComponent extends Component {
 *     @property.bool(true)
 *     myBool!: boolean;
 *
 *     @property.int(42)
 *     myInt!: number;
 *
 *     @property.string('Hello World!')
 *     myString!: string;
 *
 *     @property.mesh()
 *     myMesh!: Mesh;
 * }
 * ```
 *
 * For JavaScript users, please declare the properties statically.
 */
export const property = {};
for (const name in Property) {
    /* Assign each property functor to a TypeScript decorator.
     * This code extracts parameters and return type to provide proper
     * typings to the user. */
    property[name] = (...args) => {
        const functor = Property[name];
        return propertyDecorator(functor(...args));
    };
}
