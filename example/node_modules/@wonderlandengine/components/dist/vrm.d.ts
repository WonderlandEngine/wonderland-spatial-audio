/// <reference types="gl-matrix/index.js" />
/**
 * Component for loading and handling VRM 1.0 models.
 *
 * Posing of the model should be done exclusively by rotating the bones. These can be
 * accessed using the `.bones` property and follow the VRM bone naming. Note that not
 * all VRM models will have all possible bones. The rest pose (T-pose) is captured in
 * the `.restPose` property. Resetting a bone to its rest pose can be done as follows:
 * ```js
 * vrmComponent.bones[vrmBoneName].rotationLocal = vrmComponent.restPose[vrmBoneName];
 * ```
 *
 * Moving the model through the world should be done by moving the object this component
 * is attached to. In other words, by moving the root of the VRM model. The bones and any
 * descendant objects should *not* be used to move the VRM model.
 *
 * The core extension `VRMC_vrm` as well as the`VRMC_springBone` and `VRMC_node_constraint`
 * extensions are supported.
 *
 * **Limitations:**
 * - No support for `VRMC_material_mtoon`
 * - Expressions aren't supported
 * - Expression based lookAt isn't supported
 * - Mesh annotation mode `auto` is not supported (first person mode)
 */
export class Vrm extends Component {
    static Properties: {
        /** URL to a VRM file to load */
        src: {
            type: Type;
        };
        /** Object the VRM is looking at */
        lookAtTarget: {
            type: Type;
        };
    };
    /** Meta information about the VRM model */
    meta: null;
    /** The humanoid bones of the VRM model */
    bones: {
        hips: null;
        spine: null;
        chest: null;
        upperChest: null;
        neck: null;
        head: null;
        leftEye: null;
        rightEye: null;
        jaw: null;
        leftUpperLeg: null;
        leftLowerLeg: null;
        leftFoot: null;
        leftToes: null;
        rightUpperLeg: null;
        rightLowerLeg: null;
        rightFoot: null;
        rightToes: null;
        leftShoulder: null;
        leftUpperArm: null;
        leftLowerArm: null;
        leftHand: null;
        rightShoulder: null;
        rightUpperArm: null;
        rightLowerArm: null;
        rightHand: null;
        leftThumbMetacarpal: null;
        leftThumbProximal: null;
        leftThumbDistal: null;
        leftIndexProximal: null;
        leftIndexIntermediate: null;
        leftIndexDistal: null;
        leftMiddleProximal: null;
        leftMiddleIntermediate: null;
        leftMiddleDistal: null;
        leftRingProximal: null;
        leftRingIntermediate: null;
        leftRingDistal: null;
        leftLittleProximal: null;
        leftLittleIntermediate: null;
        leftLittleDistal: null;
        rightThumbMetacarpal: null;
        rightThumbProximal: null;
        rightThumbDistal: null;
        rightIndexProximal: null;
        rightIndexIntermediate: null;
        rightIndexDistal: null;
        rightMiddleProximal: null;
        rightMiddleIntermediate: null;
        rightMiddleDistal: null;
        rightRingProximal: null;
        rightRingIntermediate: null;
        rightRingDistal: null;
        rightLittleProximal: null;
        rightLittleIntermediate: null;
        rightLittleDistal: null;
    };
    /** Rotations of the bones in the rest pose (T-pose) */
    restPose: {};
    _nodeConstraints: any[];
    _springChains: any[];
    _sphereColliders: any[];
    _capsuleColliders: any[];
    _firstPersonAnnotations: any[];
    _lookAt: null;
    _initialized: boolean;
    init(): void;
    _tempV3: vec3 | undefined;
    _tempV3A: vec3 | undefined;
    _tempV3B: vec3 | undefined;
    _tempQuat: quat | undefined;
    _tempQuatA: quat | undefined;
    _tempQuatB: quat | undefined;
    _tempMat4A: mat4 | undefined;
    _tempQuat2: quat2 | undefined;
    _tailToShape: vec3 | undefined;
    _headToTail: vec3 | undefined;
    _inertia: vec3 | undefined;
    _stiffness: vec3 | undefined;
    _external: vec3 | undefined;
    _rightVector: vec3 | undefined;
    _upVector: vec3 | undefined;
    _forwardVector: vec3 | undefined;
    _identityQuat: quat | undefined;
    _rad2deg: number | undefined;
    start(): void;
    /**
     * Parses the VRM glTF extensions and initializes the vrm component.
     * @param {GLTFExtensions} extensions The glTF extensions for the VRM model
     */
    _initializeVrm(extensions: GLTFExtensions): void;
    _parseHumanoid(humanoid: any, extensions: any): void;
    _parseFirstPerson(firstPerson: any, extensions: any): void;
    _parseLookAt(lookAt: any): void;
    _findAndParseNodeConstraints(extensions: any): void;
    _parseAndInitializeSpringBones(springBone: any, extensions: any): void;
    update(dt: any): void;
    _rangeMap(rangeMap: any, input: any): number;
    _resolveLookAt(): void;
    _resolveConstraints(): void;
    _resolveConstraint(nodeConstraint: any): void;
    _updateSpringBones(dt: any): void;
    /**
     * @param {boolean} firstPerson Whether the model should render for first person or third person views
     */
    set firstPerson(arg: boolean);
}
import { Component } from '@wonderlandengine/api';
import { vec3 } from 'gl-matrix';
import { quat } from 'gl-matrix';
import { mat4 } from 'gl-matrix';
import { quat2 } from 'gl-matrix';
import { Type } from '@wonderlandengine/api';
