/**
 * 8thwall camera component.
 *
 * Sets up the 8thwall pipeline and retrieves tracking events to place an
 * object at the location of the tracked AR camera / mobile device.
 *
 * Use this for SLAM tracking based on 8thwall.
 *
 * Make sure to enable 8thwall in "Project Settings" > "AR". See also the
 * [AR Getting Started Guide](/getting-started/quick-start-ar)
 *
 *
 * Currently only supports world-tracking (SLAM) using BACK camera.
 *
 * - remove any occurrences of the old 8thwall-camera component in the editor
 * - Add this component to NonVrCamera
 *
 * IMPORTANT!
 * - until it get's fixed, select 'customIndexHtml' in the project settings
 * - open a generated index.html and crossorigin="anonymous" attribute to the <script> tag where //apps.8thwall.com/xrweb is loaded
 *
 *
 * ######### Using UI overlays #############
 * By default, this component renders own UI to give the user feedback about rejected permissions or tracking errors.
 * It can be changed by enabling useCustomUIOverlays flag.
 *
 * If useCustomUIOverlays is enabled, you are expected handle the following events dispatched by the window object:
 * - "8thwall-request-user-interaction" - used only on iOS safari. Request a user to perform and interaction with the page so that javascript is allowed to allowed to request a motion/camera/mic permissions.
 *  Make sure the window object is dispatching an '8thwall-safe-to-request-permissions' event after interaction has happened.
 * ```
 * <button onclick="window.dispatchEvent(new Event('8thwall-safe-to-request-permissions'))">Allow Sensors</button>
 * ```
 *
 * - "8thwall-permission-fail" - user rejected any of the permissions
 *
 * - "8thwall-error" - runtime 8thwall error occurred
 */
export class ARCamera8thwall extends Component {
    static Properties: {
        /** Override the WL html overlays for handling camera/motion permissions and error handling */
        useCustomUIOverlays: {
            type: Type;
            default: boolean;
        };
    };
    name: string;
    started: boolean;
    view: null;
    position: number[];
    rotation: number[];
    glTextureRenderer: null;
    promptForDeviceMotion(): Promise<any>;
    getPermissions(): Promise<void>;
    init(): void;
    /**
     * @private
     * 8thwall pipeline function
     */
    private onUpdate;
    /**
     * @private
     * 8thwall pipeline function
     */
    private onAttach;
    /**
     * @private
     * 8thwall pipeline function
     */
    private onException;
    /**
     * @private
     * 8thwall pipeline function
     */
    private onCameraStatusChange;
    start(): Promise<void>;
    waitForXR8(): Promise<any>;
}
import { Component } from '@wonderlandengine/api';
import { Type } from '@wonderlandengine/api';
