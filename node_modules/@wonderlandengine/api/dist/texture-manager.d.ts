import { WonderlandEngine } from './engine.js';
import { Texture } from './wonderland.js';
/**
 * Manage textures.
 *
 * This manager is accessible on the engine instance using {@link WonderlandEngine.textures}.
 *
 * Usage
 *
 * ```js
 * this.engine.load('path/to/texture.png').then((texture) => {
 *     console.log('Loaded!');
 *     console.log(texture);
 * })
 * ```
 */
export declare class TextureManager {
    #private;
    /** Wonderland Engine instance. @hidden */
    protected _engine: WonderlandEngine;
    /** @hidden */
    constructor(engine: WonderlandEngine);
    /**
     * Retrieve the texture with the given id.
     *
     * @param id The texture identifier.
     * @return The {@link Texture} if found, `null` otherwise.
     */
    get(id: number): Texture | null;
    /**
     * Load an image from URL as {@link Texture}.
     *
     * @param filename URL to load from.
     * @param crossOrigin Cross origin flag for the image object.
     * @returns Loaded texture.
     */
    load(filename: string, crossOrigin?: string): Promise<Texture>;
    /**
     * Wrap a texture ID using {@link Texture}.
     *
     * @note This method performs caching and will return the same
     * instance on subsequent calls.
     *
     * @param id ID of the texture to create.
     *
     * @returns The texture.
     */
    wrap(id: number): Texture;
    /** Number of textures allocated in the manager. */
    get allocatedCount(): number;
    /**
     * Number of textures in the manager.
     *
     * @note For performance reasons, avoid calling this method when possible.
     */
    get count(): number;
    /**
     * Set a new texture in the manager cache.
     *
     * @note This api is meant to be used internally.
     *
     * @param texture The texture to add.
     *
     * @hidden
     */
    _set(texture: Texture): void;
    /**
     * Destroys the texture.
     *
     * @note This api is meant to be used internally.
     *
     * @param texture The texture to destroy.
     *
     * @hidden
     */
    _destroy(texture: Texture): void;
    /**
     * Reset the manager.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _reset(): void;
}
